package com.skillnetinc.ops;

import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Properties;

import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.skillnetinc.utility.Constants;
import com.skillnetinc.utility.InputUtility;

public class OpsUtility {

	private static Properties properties;



//	public static void readPropertiesFile() {
//		if (properties == null) {
//
//			FileReader fr;
//			properties = new Properties();
//
//			try {
//				fr = new FileReader("Details.properties");
//				properties.load(fr);
//			} catch (IOException e) {
//				System.out.println("Error while reading properties file.");
//				e.printStackTrace();
//			}
//		}
//	}
//
//	public static CommonDetails getCommonDetails() {
//
//		readPropertiesFile();
//		CommonDetails commonDetails = new CommonDetails();
//		commonDetails.setAnalystName(properties.getProperty(Constants.ANALYST_NAME));
//		return commonDetails;
//	}

	public static JScrollPane getSheetOne() {
		String column[] = { "INCIDENT#", "ASSIGNED TO", "ASSIGNED DATE", "TEAM UPDATE", "RESOLUTION", "RESOLUTION DATE",
				"COMMENTS", "MONTH", "PRIORITY#", "REGION", "COUNTRY", "STORE#", "ASSIGNED BY", "ISSUE TYPE",
				"ISSUE SUB-TYPE", "DESCRIPTION" };
		String row[][] = {};
		DefaultTableModel listTableModel = new DefaultTableModel(row, column);
		
		String marker[] = InputUtility.markerDesc.getText().split("\n");
		List<String> listMarker = new ArrayList<String>(Arrays.asList(marker));
		listMarker.removeIf(n -> n.contains("appears to be offline"));
		marker = new String[listMarker.size()];
		marker = listMarker.toArray(marker);
		
		StringBuilder incDesc = new StringBuilder();
		String notMatchedMarker[] = {};
		List<String> listMatchedMarker = new ArrayList<String>();
		List<String> listNotMatchedMarker = new ArrayList<String>();
		String comment = Constants.CURRENT_DATE+" ["+InputUtility.analystName.getSelectedItem()+"]: "+"Hello GSD,\r\n" + 
				"\r\n" + 
				"Markers are cleared.\r\n" + 
				"Please look into offline alerts.\r\n" + 
				"\r\n" + 
				"Thanks & Regards,\r\n" + 
				InputUtility.analystName.getSelectedItem();
		
		for (int i = 0; i < marker.length; i++) {
				for (int j = 0; j < marker.length; j++) {
					if (marker[i].substring(0, 7).equals(marker[j].substring(0, 7))) {
						listMatchedMarker.add(marker[j]);
					} else {
						listNotMatchedMarker.add(marker[j]);
					}
				}
				
				for (String string : listMatchedMarker) {
					incDesc.append(string+" ");
				}
				
				listMatchedMarker.clear();
				listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), InputUtility.analystName.getSelectedItem(),
						Constants.CURRENT_DATE, null, null, Constants.CURRENT_DATE, comment, Constants.CURRENT_MONTH, Constants.PRIORITY,
						marker[i].substring(3, 7), getRegion(marker[i]), getCountry(marker[i].substring(0, 2)), Constants.ASSIGNED_BY,
						Constants.ISSUE_TYPE, getSubIssueType(marker[i]), incDesc
				});
				
				marker = listNotMatchedMarker.toArray(notMatchedMarker);
				listNotMatchedMarker.clear();
				incDesc = new StringBuilder();
				i--;
		}

//		for (int i = 0; i < marker.length; i++) {
//			String desc = marker[i];
//			String incDesc = null;
//			//int dupRow = 1;
//			for (int j = 0; j < marker.length; j++) {
//				if (!marker[i].contains("appears to be offline") && 
//						marker[i].substring(0,7).equals(marker[j].substring(0,7))
//						&& !marker[i].equals(marker[j])) {
//					incDesc = desc + "\r\n\t "+marker [j];
//					//j++;
//					System.out.println(incDesc);
//					
////					getRegion(marker[i]);
////					getCountry(marker[i].substring(0, 2));
////					getSubIssueType(marker[i]);
//					
//					
//					//listTableModel.removeRow(1);
//
////					listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), getRegion(marker[i]),
////							getCountry(marker[i].substring(0, 2)), marker[i].substring(3, 7), marker[i].substring(8, 12),
////							Constants.CURRENT_DATE, getCommonDetails().getIssueType(), getSubIssueType(marker[i]),
////							marker[i] });
//
//				}
//			}
//			listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), getCommonDetails().getAnalystName(),
//					Constants.CURRENT_DATE, null, null, Constants.CURRENT_DATE, null, Constants.CURRENT_MONTH, getCommonDetails().getPriority(),
//					getRegion(marker[i]), getCountry(marker[i].substring(0, 2)), marker[i].substring(3, 7), getCommonDetails().getAssignedBy(),
//					getCommonDetails().getIssueType(), getSubIssueType(marker[i]), incDesc
//			});
//		}
		
		
		JTable jt = new JTable(listTableModel);
		JScrollPane sp = new JScrollPane(jt);
		sp.setFont(new Font("Calibri", Font.LAYOUT_LEFT_TO_RIGHT, 10));
		return sp;
	}

//	public static JScrollPane getSheetTwo() {
//		String column[] = { "INCIDENT#", "REGION", "COUNTRY", "STORE#", "TILL#", "DATE", "ISSUE TYPE", "ISSUE SUB-TYPE",
//				"DESCRIPTION" };
//		String row[][] = {};
//		DefaultTableModel listTableModel = new DefaultTableModel(row, column);
//		
//		String marker[] = InputUtility.markerDesc.getText().split("\n");
//
//
//		for (int i = 0; i < marker.length; i++) {
//			if (!marker[i].contains("appears to be offline")) {
//
////				getRegion(marker[i]);
////				getCountry(marker[i].substring(0, 2));
////				getSubIssueType(marker[i]);
//
//				listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), getRegion(marker[i]),
//						getCountry(marker[i].substring(0, 2)), marker[i].substring(3, 7), marker[i].substring(8, 12),
//						Constants.CURRENT_DATE, Constants.ISSUE_TYPE, getSubIssueType(marker[i]),
//						marker[i] });
//			}
//		}
//		JTable jt = new JTable(listTableModel);
//		JScrollPane sp = new JScrollPane(jt);
//		return sp;
//
//	}
	
	public static JScrollPane getSheetTwo() {
		String column[] = { "INCIDENT#", "REGION", "COUNTRY", "STORE#", "TILL#", "DATE", "ISSUE TYPE", "ISSUE SUB-TYPE",
				"DESCRIPTION" };
		String row[][] = {};
		DefaultTableModel listTableModel = new DefaultTableModel(row, column);
		
		String marker[] = InputUtility.markerDesc.getText().split("\n");
		List<String> listMarker = new ArrayList<String>(Arrays.asList(marker));
		listMarker.removeIf(n -> n.contains("appears to be offline"));
		marker = new String[listMarker.size()];
		marker = listMarker.toArray(marker);
		
		StringBuilder incDesc = new StringBuilder();
		String notMatchedMarker[] = {};
		List<String> listMatchedMarker = new ArrayList<String>();
		List<String> listNotMatchedMarker = new ArrayList<String>();
		
		
		
		//String marker[] = InputUtility.markerDesc.getText().split("\n");

		for (int i = 0; i < marker.length; i++) {
			for (int j = 0; j < marker.length; j++) {
				if (marker[i].substring(0, 11).equals(marker[j].substring(0, 11))) {
					listMatchedMarker.add(marker[j]);
				} else {
					listNotMatchedMarker.add(marker[j]);
				}
			}
			
			for (String string : listMatchedMarker) {
				incDesc.append(string+" ");
			}
			
//			listMatchedMarker.clear();
//			listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), InputUtility.analystName.getSelectedItem(),
//					Constants.CURRENT_DATE, null, null, Constants.CURRENT_DATE, comment, Constants.CURRENT_MONTH, Constants.PRIORITY,
//					marker[i].substring(3, 7), getRegion(marker[i]), getCountry(marker[i].substring(0, 2)), Constants.ASSIGNED_BY,
//					Constants.ISSUE_TYPE, getSubIssueType(marker[i]), incDesc
//			});
			
			listTableModel.addRow(new Object[] { InputUtility.incidentNum.getText(), getRegion(marker[i]),
					getCountry(marker[i].substring(0, 2)), marker[i].substring(3, 7), marker[i].substring(8, 12),
					Constants.CURRENT_DATE, Constants.ISSUE_TYPE, getSubIssueType(marker[i]),
					marker[i] });
			
			marker = listNotMatchedMarker.toArray(notMatchedMarker);
			listNotMatchedMarker.clear();
			incDesc = new StringBuilder();
			i--;
	}

		for (int i = 0; i < marker.length; i++) {
			if (!marker[i].contains("appears to be offline")) {

//				getRegion(marker[i]);
//				getCountry(marker[i].substring(0, 2));
//				getSubIssueType(marker[i]);

			}
		}
		JTable jt = new JTable(listTableModel);
		JScrollPane sp = new JScrollPane(jt);
		return sp;

	}	

//	public static JScrollPane getSheetThree() {
//		String column[] = { "REGION", "COUNTRY", "STORE#", "REG#", "DATE", "ALERT" };
//		
//		String row[][] = { { Constants.ANALYST_NAME, Constants.CURRENT_DATE, InputUtility.markerDesc.getText(), "101", "Amit", "670000" }, { "102", "Jai", "780000", "101", "Amit", "670000" }, { "101", "Sachin", "700000", "101", "Amit", "670000" } };
//		DefaultTableModel listTableModel = new DefaultTableModel(row, column);
//		//JTable jt = new JTable(getSheetThreeRow(), column);
//		JTable jt = new JTable(listTableModel);
//		//getSheetThreeRow();
//		JScrollPane sp = new JScrollPane(jt);
//		
//		return sp;
//	}
//
//	private static Object[][] getSheetThreeRow() {
//		Object[][] row = new Object[50][6];
//		
//		String marker [] = InputUtility.markerDesc.getText().split("\n");
//		String emeiaCountries [] = {"ES", "DE", "CH", "BE", "AT", "IT", "UK", "RU", "AE", };
//		String amerCountries [] = {"US", "CA", "MX"};
//		String asiaCountries [] = {"CN", "MY", "TH", "JP", "SA", "KW", "BH", "QA", "HK", "SG", "AU", "KR", };
//		String region = null;
//		
//		for (int i = 0; i < marker.length; i++) {
//			Locale l = new Locale("", marker[i].substring(0, 2));
//			//System.out.println(marker[i].substring(0, 2));
//			//if(marker[i].contains("startup")){
//			//System.out.println(marker[i].substring(3, 7));
//			//System.out.println(marker[i].substring(8, 12));
//			//if(marker[i].substring(0, 2).equalsIgnoreCase("US")) {
////			System.out.println(marker[i].substring(0, 2)+"-"+l.getDisplayCountry().toUpperCase());
//			for (int j = 0; j < emeiaCountries.length; j++) {
//				if(marker[i].contains(asiaCountries[j])) {
//					region = "EMEIA";
//				}
//			}
//			
//			for (int j = 0; j < asiaCountries.length; j++) {
//				if(marker[i].contains(asiaCountries[j])) {
//					region = "ASIA_PACIFIC";
//				}
//			}
//			
//			for (int j = 0; j < amerCountries.length; j++) {
//				if(marker[i].contains(asiaCountries[j])) {
//					region = "AMER";
//				}
//			}
//			 row = new String [][]{{region, l.getDisplayCountry().toUpperCase(), marker[i].substring(3, 7), marker[i].substring(8, 12), Constants.CURRENT_DATE, marker[i] }};
//			
//		}
//		return row;
//	}

	public static JScrollPane getSheetThree() {
		String column[] = { "REGION", "COUNTRY", "STORE#", "TILL#", "DATE", "DESCRIPTION" };
		String row[][] = {};
		DefaultTableModel listTableModel = new DefaultTableModel(row, column);
		
		String marker[] = InputUtility.markerDesc.getText().split("\n");


		for (int i = 0; i < marker.length; i++) {

//			getRegion(marker[i]);
//			getCountry(marker[i].substring(0, 2));

			listTableModel.addRow(new Object[] { getRegion(marker[i]), getCountry(marker[i].substring(0, 2)),
					marker[i].substring(3, 7), marker[i].substring(8, 12), Constants.CURRENT_DATE, marker[i] });
		}
		
		
		JTable jt = new JTable(listTableModel);
		JScrollPane sp = new JScrollPane(jt);
//		try {
//			writeToExcell(jt, null);
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
		return sp;
		
		

	}
	
	
	private static String getRegion(String desc) {
		String emeiaCountries[] = { "UK", "AT", "BH", "BE", "CZ", "FR", "DE", "HU", "IT", "KW", "NL", "PT", "QA", "RU",
				"SA", "ES", "CH", "AE" };
		String amerCountries[] = { "US", "CA", "MX", "BR" };
		String asiaCountries[] = { "AU", "JP", "MY", "SG", "KR", "TH", "HK", "CN", "MO" };
		String region = null;
		String country = desc.substring(0,2);
		
		for (int j = 0; j < asiaCountries.length; j++) {
			for (int k = 0; k < amerCountries.length; k++) {
				for (int l = 0; l < emeiaCountries.length; l++) {
					if (country.contains(asiaCountries[j])) {
						region = "Asia Pacific";
					} else if (country.contains(amerCountries[k])) {
						region = "Americas";
					} else if (country.contains(emeiaCountries[l])) {
						region = "EMEIA";
					}
				}
			}
		}
		return region;
	}

	private static String getCountry(String argCountry) {
		String country = null;
		Locale locale = new Locale("", argCountry);
		if (argCountry != null & argCountry.equalsIgnoreCase("UK")) {
			country = "UNITED KINGDOM";
		} else {
			country = locale.getDisplayCountry().toUpperCase();
		}
		return country;
	}

	private static String getSubIssueType(String subIssueType) {
		String issueSubType = null;

		if (subIssueType.contains("startup.err") || subIssueType.contains("upload-pospolls.err")) {
			issueSubType = "Start up error";
		} else if (subIssueType.contains("get-remote-sql-server-backup.err")) {
			issueSubType = "Download error";
		} else if (subIssueType.contains("restore-xstore-db.err") || subIssueType.contains("unzipdbbackup.err")) {
			issueSubType = "Database restore Error";
		} else {
			issueSubType = "Close error";
		}
		return issueSubType;
	}
	
//	private static void writeToExcell(JTable table, Path path) throws FileNotFoundException, IOException {
//	    new WorkbookFactory();
//	    Workbook wb = new XSSFWorkbook(); //Excell workbook
//	    Sheet sheet = wb.createSheet(); //WorkSheet
//	    Row row = sheet.createRow(2); //Row created at line 3
//	    TableModel model = table.getModel(); //Table model
//
//
//	    Row headerRow = sheet.createRow(0); //Create row at line 0
//	    for(int headings = 0; headings < model.getColumnCount(); headings++){ //For each column
//	        headerRow.createCell(headings).setCellValue(model.getColumnName(headings));//Write column name
//	    }
//
//	    for(int rows = 0; rows < model.getRowCount(); rows++){ //For each table row
//	        for(int cols = 0; cols < table.getColumnCount(); cols++){ //For each table column
//	            row.createCell(cols).setCellValue(model.getValueAt(rows, cols).toString()); //Write value
//	        }
//
//	        //Set the row to the next one in the sequence 
//	        row = sheet.createRow((rows + 3)); 
//	    }
//	    wb.write(new FileOutputStream(path.toString()));//Save the file     
//	}

}
