package inter;

class person implements Cloneable {
//Lower-level object  
	private Car car;
	private String name;

	public Car getCar() {
		return car;
	}

	public String getName() {
		return name;
	}

	public void setName(String s) {
		name = s;
	}

	public ShallowCopyExample(String s, String t) {
		name = s;
		car = new Car(t);
	}

	public Object clone() {
//shallow copy  
		try {
			return super.clone();
		} catch (CloneNotSupportedException e) {
			return null;
		}
	}
}

class Car {
	private String name;

	public String getName() {
		return name;
	}

	public void setName(String s) {
		name = s;
	}

	public Car(String s) {
		name = s;
	}
}

public class ShallowCopyExample {
	public static void main(String args[]) {
//Original Object  
		ShallowCopyExample p = new ShallowCopyExample("Person-A", "Civic");
		System.out.println("Original (orginal values): " + p.getName() + " - " + p.getCar().getName());
//Clone as a shallow copy  
		ShallowCopyExample q = (ShallowCopyExample) p.clone();
		System.out.println("Clone (before change): " + q.getName() + " - " + q.getCar().getName());
//change the primitive member  
		q.setName("Person-B");
//change the lower-level object  
		q.getCar().setName("Accord");
		System.out.println("Clone (after change): " + q.getName() + " - " + q.getCar().getName());
		System.out.println("Original (after clone is modified): " + p.getName() + " - " + p.getCar().getName());
	}
}